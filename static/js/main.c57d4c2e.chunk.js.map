{"version":3,"sources":["Component/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputdata","setInputData","lists","localStorage","getItem","JSON","parse","getlocalData","items","setItems","isEditItem","setIsEditItem","toggelbutton","setToggelbutton","addItem","map","curElem","id","name","myNewInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onChange","e","target","onClick","index","item_todo_edited","find","editItem","updatedItem","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMA4GeA,EAhGF,WACT,MAA8BC,mBAAS,IAAvC,mBAAMC,EAAN,KAAgBC,EAAhB,KACA,EAAsBF,mBAVL,WACjB,IAAMG,EAAQC,aAAaC,QAAQ,cACnC,OAAGF,EACQG,KAAKC,MAAMJ,GAEZ,GAKqBK,IAA/B,mBAAMC,EAAN,KAAYC,EAAZ,KACA,EAAiCV,mBAAS,IAA1C,mBAAOW,EAAP,KAAkBC,EAAlB,KACA,EAAqCZ,oBAAS,GAA9C,mBAAOa,EAAP,KAAoBC,EAApB,KAEMC,EAAU,WACZ,GAAId,EAEE,GAAGA,GAAaY,EACdH,EACID,EAAMO,KAAI,SAACC,GACH,OAAGA,EAAQC,KAAKP,EACZ,2BAAUM,GAAV,IAAmBE,KAAKlB,IAErBgB,MAGnBf,EAAa,IACrBU,EAAc,MACdE,GAAgB,OAEZ,CACA,IAAMM,EAAiB,CACnBF,IAAG,IAAIG,MAAOC,UAAUC,WACxBJ,KAAMlB,GAEVS,EAAS,GAAD,mBAAKD,GAAL,CAAWW,KACnBlB,EAAa,SApBbsB,MAAM,sBAiDhB,OAHCC,qBAAU,WACNrB,aAAasB,QAAQ,aAAapB,KAAKqB,UAAUlB,MACnD,CAACA,IAEH,mCACD,qBAAKmB,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACG,mCACG,qBAAKC,IAAI,oBAAoBC,IAAI,aACjC,sEAEJ,sBAAKF,UAAU,WAAf,UACI,uBAAOG,KAAK,OAAOC,YAAY,mBAAcJ,UAAU,eAAeK,MAAOhC,EAAWiC,SAAU,SAACC,GAAD,OAAKjC,EAAaiC,EAAEC,OAAOH,UAC5HpB,EACE,mBAAGe,UAAU,sBAAsBS,QAAStB,IAC3C,mBAAGa,UAAU,qBAAqBS,QAAStB,OAGnD,qBAAKa,UAAU,YAAf,SAEQnB,EAAMO,KAAI,SAACC,GACP,OACI,sBAAKW,UAAU,WAAf,UACA,6BAAKX,EAAQE,OACb,sBAAKS,UAAU,WAAf,UAEA,mBAAGA,UAAU,sBAAsBS,QAAS,kBAtC/C,SAACC,GACd,IAAMC,EAAmB9B,EAAM+B,MAAK,SAACvB,GACjC,OAAOA,EAAQC,KAAKoB,KAExBpC,EAAaqC,EAAiBpB,MAC9BP,EAAc0B,GACdxB,GAAgB,GAgCgD2B,CAASxB,EAAQC,OACjE,mBAAGU,UAAU,2BAA2BS,QAAS,kBAhDpD,SAACC,GACd,IAAMI,EAAYjC,EAAMkC,QAAO,SAAC1B,GACxB,OAAOA,EAAQC,KAAOoB,KAG9B5B,EAASgC,GA2C4DE,CAAW3B,EAAQC,YALzCD,EAAQC,SAavD,qBAAKU,UAAU,YAAf,SAA2B,wBAAQA,UAAU,eAAe,oBAAkB,aAAaS,QAtC/E,WAChB3B,EAAS,KAqCsB,SAAoF,yDC1FxGmC,EARH,WACV,OACC,mCACA,cAAC,EAAD,OCMYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c57d4c2e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './style.css'\r\n\r\n\r\nconst getlocalData = () =>{\r\n    const lists = localStorage.getItem(\"mytodoList\");\r\n    if(lists){\r\n        return JSON.parse(lists);\r\n    }else{\r\n        return[];\r\n    }\r\n}\r\nconst Todo = () => {\r\n    const[inputdata,setInputData]=useState(\"\");\r\n    const[items,setItems]=useState(getlocalData());\r\n    const [isEditItem,setIsEditItem]=useState(\"\");\r\n    const [toggelbutton,setToggelbutton]=useState(false);\r\n\r\n    const addItem = () =>{\r\n        if(!inputdata){\r\n            alert(\"plz fill the data\");\r\n        }else if(inputdata && toggelbutton){\r\n                setItems(\r\n                    items.map((curElem)=>{\r\n                            if(curElem.id===isEditItem){\r\n                                return{...curElem, name:inputdata}\r\n                            }\r\n                            return curElem;\r\n                    })\r\n                );\r\n                setInputData(\"\");\r\n        setIsEditItem(null);\r\n        setToggelbutton(false);\r\n        }\r\n        else{\r\n            const myNewInputData = {\r\n                id:new Date().getTime().toString(),\r\n                name: inputdata,\r\n            }\r\n            setItems([...items,myNewInputData]);\r\n            setInputData(\"\");\r\n        }\r\n    };\r\n  \r\n\r\n    const deleteItem=(index)=>{\r\n        const updatedItem=items.filter((curElem)=>{\r\n                return curElem.id !== index;\r\n\r\n        });\r\n        setItems(updatedItem);\r\n\r\n    }\r\n\r\n    const editItem = (index) =>{\r\n        const item_todo_edited = items.find((curElem)=>{\r\n            return curElem.id===index;\r\n        });\r\n        setInputData(item_todo_edited.name);\r\n        setIsEditItem(index);\r\n        setToggelbutton(true);\r\n    }\r\n\r\n   const removeAll =()=>{\r\n    setItems([]);\r\n   };\r\n   useEffect(()=>{\r\n       localStorage.setItem(\"mytodoList\",JSON.stringify(items));\r\n   },[items]);\r\n  return (\r\n   <>\r\n  <div className=\"main-div\">\r\n      <div className=\"child-div\">\r\n         <figure>\r\n            <img src=\"./images/todo.svg\" alt=\"todologo\"/>  \r\n            <figcaption>Add Your List Here ✌</figcaption>   \r\n        </figure> \r\n        <div className=\"addItems\">\r\n            <input type=\"text\" placeholder=\"✍ Add items\" className=\"form-control\" value={inputdata} onChange={(e)=>setInputData(e.target.value)}/>\r\n            {toggelbutton ?\r\n              (<i className=\"far fa-edit add-btn\" onClick={addItem}></i>) :\r\n              ( <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>)}\r\n           \r\n        </div>\r\n        <div className=\"showItems\">\r\n            {\r\n                items.map((curElem)=>{\r\n                    return(\r\n                        <div className=\"eachItem\" key={curElem.id}>\r\n                        <h3>{curElem.name}</h3>\r\n                        <div className=\"todo-btn\">\r\n                          \r\n                        <i className=\"far fa-edit add-btn\" onClick={()=>editItem(curElem.id)}></i>\r\n                        <i className=\"far fa-trash-alt add-btn\" onClick={()=>deleteItem(curElem.id)}></i>\r\n                        </div>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n            \r\n        </div>\r\n        <div className=\"showItems\"><button className=\"btn effect04\" data-sm-link-text=\"Remove All\" onClick={removeAll}><span>CHECKLIST</span></button></div>\r\n      </div>\r\n  </div>\r\n   </>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\nimport Todo from './Component/todo'\n\nconst App = () => {\n  return (\n   <>\n   <Todo/>\n   </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}